name: Deploy to Hetzner Server

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:  # Allow manual triggering

env:
  DEPLOYMENT_ENV: production

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for proper git info
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Setup Deployment Environment
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Create environment file with secrets
        cat > deployment/.env << EOF
        # Hetzner Server Configuration
        HETZNER_HOST=${{ secrets.HETZNER_HOST }}
        HETZNER_USER=${{ secrets.HETZNER_USER }}
        HETZNER_SSH_KEY=/tmp/ssh_key
        
        # Docker Registry (if using)
        DOCKER_REGISTRY_URL=${{ secrets.DOCKER_REGISTRY_URL }}
        DOCKER_REGISTRY_USER=${{ secrets.DOCKER_REGISTRY_USER }}
        DOCKER_REGISTRY_PASS=${{ secrets.DOCKER_REGISTRY_PASS }}
        
        # Application Environment
        DEPLOYMENT_ENV=production
        EOF
        
        # Setup SSH key
        echo "${{ secrets.HETZNER_SSH_KEY }}" > /tmp/ssh_key
        chmod 600 /tmp/ssh_key
        
        # Make deployment script executable
        chmod +x deployment/deploy.sh
    
    - name: Create Production Environment File
      run: |
        # Create production .venv file for the server
        cat > .venv.production << EOF
        # Production Environment Configuration
        DEPLOYMENT_ENV=production
        SENTRY_ENVIRONMENT=production
        
        # Database Configuration
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        
        # API Keys
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
        PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}
        PINECONE_INDEX=${{ secrets.PINECONE_INDEX }}
        TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}
        
        # Langfuse Configuration
        LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }}
        LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }}
        LANGFUSE_HOST=https://cloud.langfuse.com
        
        # Application Configuration
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
        
        # Model Configuration
        EMBEDDING_MODEL='text-embedding-3-small'
        RERANKER_MODEL='cross-encoder/ms-marco-MiniLM-L-6-v2'
        USE_NER='False'
        USE_RERANKER='True'
        HYBRID_ALPHA='0.50'
        DEFAULT_PROMPT_TYPE=advanced
        
        # Performance Settings
        TOKENIZERS_PARALLELISM=false
        PYTHONUNBUFFERED=1
        PYTHONDONTWRITEBYTECODE=1
        
        # Monitoring
        SENTRY_DSN=${{ secrets.SENTRY_DSN }}
        
        # Timezone
        TZ=UTC
        EOF
    
    - name: Test SSH Connection
      run: |
        # Test SSH connection to server
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i /tmp/ssh_key \
          ${{ secrets.HETZNER_USER }}@${{ secrets.HETZNER_HOST }} "echo 'SSH connection successful'"
    
    - name: Deploy to Hetzner Server
      run: |
        # Set version from git tag or commit
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION="${{ github.ref_name }}"
        else
          VERSION="latest"
        fi
        
        # Run deployment
        VERSION="$VERSION" ./deployment/deploy.sh production
      env:
        HETZNER_HOST: ${{ secrets.HETZNER_HOST }}
        HETZNER_USER: ${{ secrets.HETZNER_USER }}
        HETZNER_SSH_KEY: /tmp/ssh_key
    
    - name: Post-Deployment Health Check
      run: |
        # Wait a bit for deployment to complete
        sleep 30
        
        # Check if application is responding
        max_attempts=10
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if curl -f -s "http://${{ secrets.HETZNER_HOST }}/health" >/dev/null; then
            echo "Health check passed (attempt $attempt)"
            break
          else
            echo "Health check failed, attempt $attempt/$max_attempts"
            if [ $attempt -eq $max_attempts ]; then
              echo "Health check failed after $max_attempts attempts"
              exit 1
            fi
            sleep 10
          fi
          attempt=$((attempt + 1))
        done
    
    - name: Deployment Summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "**Target Server:** ${{ secrets.HETZNER_HOST }}" >> $GITHUB_STEP_SUMMARY
        echo "**Git Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Git Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "**Status:** Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "**Application URL:** http://${{ secrets.HETZNER_HOST }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status:** Deployment Failed" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Cleanup
      if: always()
      run: |
        # Remove sensitive files
        rm -f /tmp/ssh_key
        rm -f deployment/.env
        rm -f .venv.production

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Discord/Slack Notification (Optional)
      if: false  # Enable this if you want notifications
      run: |
        # You can add Discord/Slack webhook notifications here
        echo "Deployment ${{ needs.deploy.result }}" 